// Code generated by MockGen. DO NOT EDIT.
// Source: ../repository.go

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/mchaelhuang/aquafarm/internal/entity"
)

// MockFarmRepo is a mock of FarmRepo interface.
type MockFarmRepo struct {
	ctrl     *gomock.Controller
	recorder *MockFarmRepoMockRecorder
}

// MockFarmRepoMockRecorder is the mock recorder for MockFarmRepo.
type MockFarmRepoMockRecorder struct {
	mock *MockFarmRepo
}

// NewMockFarmRepo creates a new mock instance.
func NewMockFarmRepo(ctrl *gomock.Controller) *MockFarmRepo {
	mock := &MockFarmRepo{ctrl: ctrl}
	mock.recorder = &MockFarmRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFarmRepo) EXPECT() *MockFarmRepoMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockFarmRepo) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFarmRepoMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFarmRepo)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockFarmRepo) Get(ctx context.Context, filter entity.FarmFilter) ([]entity.Farm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, filter)
	ret0, _ := ret[0].([]entity.Farm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFarmRepoMockRecorder) Get(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFarmRepo)(nil).Get), ctx, filter)
}

// Store mocks base method.
func (m *MockFarmRepo) Store(ctx context.Context, farm entity.Farm) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, farm)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockFarmRepoMockRecorder) Store(ctx, farm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockFarmRepo)(nil).Store), ctx, farm)
}

// MockPondRepo is a mock of PondRepo interface.
type MockPondRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPondRepoMockRecorder
}

// MockPondRepoMockRecorder is the mock recorder for MockPondRepo.
type MockPondRepoMockRecorder struct {
	mock *MockPondRepo
}

// NewMockPondRepo creates a new mock instance.
func NewMockPondRepo(ctrl *gomock.Controller) *MockPondRepo {
	mock := &MockPondRepo{ctrl: ctrl}
	mock.recorder = &MockPondRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPondRepo) EXPECT() *MockPondRepoMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockPondRepo) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPondRepoMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPondRepo)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockPondRepo) Get(ctx context.Context, filter entity.PondFilter) ([]entity.Pond, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, filter)
	ret0, _ := ret[0].([]entity.Pond)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPondRepoMockRecorder) Get(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPondRepo)(nil).Get), ctx, filter)
}

// Store mocks base method.
func (m *MockPondRepo) Store(ctx context.Context, farm entity.Pond) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, farm)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockPondRepoMockRecorder) Store(ctx, farm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockPondRepo)(nil).Store), ctx, farm)
}

// MockStatsRepo is a mock of StatsRepo interface.
type MockStatsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockStatsRepoMockRecorder
}

// MockStatsRepoMockRecorder is the mock recorder for MockStatsRepo.
type MockStatsRepoMockRecorder struct {
	mock *MockStatsRepo
}

// NewMockStatsRepo creates a new mock instance.
func NewMockStatsRepo(ctrl *gomock.Controller) *MockStatsRepo {
	mock := &MockStatsRepo{ctrl: ctrl}
	mock.recorder = &MockStatsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatsRepo) EXPECT() *MockStatsRepoMockRecorder {
	return m.recorder
}

// CollectUserAgent mocks base method.
func (m *MockStatsRepo) CollectUserAgent(ctx context.Context, info entity.StatsRequestInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectUserAgent", ctx, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// CollectUserAgent indicates an expected call of CollectUserAgent.
func (mr *MockStatsRepoMockRecorder) CollectUserAgent(ctx, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectUserAgent", reflect.TypeOf((*MockStatsRepo)(nil).CollectUserAgent), ctx, info)
}

// GetEndpointCount mocks base method.
func (m *MockStatsRepo) GetEndpointCount(ctx context.Context) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndpointCount", ctx)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEndpointCount indicates an expected call of GetEndpointCount.
func (mr *MockStatsRepoMockRecorder) GetEndpointCount(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpointCount", reflect.TypeOf((*MockStatsRepo)(nil).GetEndpointCount), ctx)
}

// GetUniqueAgentCount mocks base method.
func (m *MockStatsRepo) GetUniqueAgentCount(ctx context.Context, endpointKey string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUniqueAgentCount", ctx, endpointKey)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUniqueAgentCount indicates an expected call of GetUniqueAgentCount.
func (mr *MockStatsRepoMockRecorder) GetUniqueAgentCount(ctx, endpointKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUniqueAgentCount", reflect.TypeOf((*MockStatsRepo)(nil).GetUniqueAgentCount), ctx, endpointKey)
}

// IncrEndpoint mocks base method.
func (m *MockStatsRepo) IncrEndpoint(ctx context.Context, info entity.StatsRequestInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrEndpoint", ctx, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrEndpoint indicates an expected call of IncrEndpoint.
func (mr *MockStatsRepoMockRecorder) IncrEndpoint(ctx, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrEndpoint", reflect.TypeOf((*MockStatsRepo)(nil).IncrEndpoint), ctx, info)
}
